{{- if .Values.Deployment.enabled -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.applicationName }}
  namespace: {{ .Release.Namespace }}
  labels:
    name : "{{ .Values.applicationName }}"
    app: {{ .Chart.Name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: "{{ .Values.applicationName }}"
    {{- if .Values.extraLabels }}
{{ toYaml .Values.extraLabels.data | indent 4 }}
    {{- end }}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
  revisionHistoryLimit: {{ .Values.spec.revisionHistoryLimit }}
  selector:
    matchLabels:
        name : "{{ .Values.applicationName }}"
        app: {{ .Chart.Name }}
  replicas: {{ .Values.spec.replicaCount }}
  template:
    metadata:
      annotations:
    {{- if .Values.annotations }}
{{ toYaml .Values.annotations.data | indent 8 }}
    {{- end }}
    ## BEGIN -- additional optional annotations to trigger a change on the deployment in case of a modification in a configmap
    {{- if .Values.ConfigMap }}
      {{- if .Values.ConfigMap.enabled }}
        configmap.default.checksum: "{{ .Values.ConfigMap.data | join "," | sha256sum }}"
      {{- end }}
    {{- end }}
    {{- if .Values.application }}
      {{- if .Values.application.enabled }}
        configmap.application.checksum: "{{ .Values.application.data | join "," | sha256sum }}"
      {{- end }}
    {{- end }}
    {{- if .Values.ConfigMapBinary }}
      {{- if .Values.ConfigMapBinary }}
        configmap.configmapbinary.checksum: "{{ .Values.ConfigMapBinary.data | join "," | sha256sum }}"
      {{- end }}
    {{- end }}
    ## END -- additional optional annotations to trigger a change on the deployment in case of a modification in a configmap
      labels:
        name : "{{ .Values.applicationName }}"
        app: {{ .Chart.Name }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}   
        env: {{ .Release.Namespace }}
        {{- if .Values.extraLabels }}
{{ toYaml .Values.extraLabels.data | indent 8 }}
        {{- end }}
    spec:
        {{- if .Values.serviceaccount }}
          {{- if .Values.serviceaccount.enabled }}
      serviceAccount: "{{ .Values.applicationName }}-account"
      serviceAccountName: "{{ .Values.applicationName }}-account"
          {{- end}}
        {{- end }} 
      terminationGracePeriodSeconds: {{ .Values.spec.terminationGracePeriodSeconds }}
      securityContext:      
        runAsUser: {{ .Values.spec.runAsUser }}
      {{- if .Values.spec.PullSecrets }}
      imagePullSecrets:
        {{- if contains "SNAPSHOT" .Values.image.tag }}
        - name: {{ .Values.spec.PullSecrets }}-dev
        {{- else }}
        - name: {{ .Values.spec.PullSecrets }}
        {{- end }}
      {{- end }}
      {{- if .Values.spec.topologySpreadConstraints }}
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        {{- if .Values.spec.topologySpreadConstraints.zone.whenUnsatisfiable }}
        whenUnsatisfiable: {{ .Values.spec.topologySpreadConstraints.zone.whenUnsatisfiable }}
        {{- else }}
        whenUnsatisfiable: DoNotSchedule
        {{- end }}
        labelSelector:
          matchLabels:
            name: "{{ .Values.applicationName }}"
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        {{- if .Values.spec.topologySpreadConstraints.hostname.whenUnsatisfiable }}
        whenUnsatisfiable: {{ .Values.spec.topologySpreadConstraints.hostname.whenUnsatisfiable }}
        {{- else }}
        whenUnsatisfiable: ScheduleAnyway
        {{- end }}
        labelSelector:
          matchLabels:
            name: "{{ .Values.applicationName }}"
      {{- end }}
      containers:
        - name: {{ .Values.containers.name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        {{- if contains "SNAPSHOT" .Values.image.tag }}
          imagePullPolicy: "Always"
        {{- else }}
          imagePullPolicy: "IfNotPresent"
        {{- end }}
# Configure lifecycle if ".Values.lifecycle.enabled" egal "true"          
          {{- if .Values.lifecycle.enabled }}  
          lifecycle:
{{ toYaml .Values.lifecycle.data | indent 12 }}  
          {{- end }}
# Configure spec.containers[*].securityContext if ".Values.containers.securityContext" exists
          securityContext:
{{ toYaml .Values.containers.securityContext | indent 12 }}  
          
#Add values "ressources" in values.yaml
          resources:
{{ toYaml .Values.spec.resources | indent 12 }}

{{- if .Values.spec.args }}          
#Add values "args" in values.yaml
          args:
{{ toYaml .Values.spec.args | indent 12 }}
{{- end }}

# Configure livenessProde if ".Values.livenessProbe.enabled" egal "true"          
          {{- if .Values.livenessProbe.enabled }}  
          livenessProbe:
{{ toYaml .Values.livenessProbe.data | indent 12 }}  
          {{- end }}

# Configure readinesssProde if ".Values.readinessProbe.enabled" egal "true"  
          {{- if .Values.readinessProbe.enabled }}   
          readinessProbe:
{{ toYaml .Values.readinessProbe.data | indent 12 }}  
          {{- end }}

# Configure startupProbe if ".Values.startupProbe.enabled" egal "true"  
          {{- if .Values.startupProbe }}  
            {{- if .Values.startupProbe.enabled }}   
          startupProbe:
{{ toYaml .Values.startupProbe.data | indent 12 }}  
            {{- end }}
          {{- end }}

# Configure volumeMounts if ".Values.volumeMounts.enabled" egal "true"  
          {{- if .Values.volumeMounts.enabled }}  
          volumeMounts:
{{ toYaml .Values.volumeMounts.data | indent 12 }}  
          {{- end }}

# Configure ports if ".Values.ports.enabled" egal "true"  
          {{- if .Values.ports.enabled }}  
          ports:
{{ toYaml .Values.ports.data | indent 12 }}  
          {{- end }}

# Configure ports if ".Values.env.enabled" egal "true"  
          {{- if .Values.env.enabled }}  
          env:
              {{- if .Values.env.data }}
{{ toYaml .Values.env.data | indent 12 }}              
              {{- end }}
              {{- if .Values.env.databuild }}
{{ toYaml .Values.env.databuild | indent 12 }}              
              {{- end }}
          {{- end }}

{{- if .Values.envFrom }}
 {{- if .Values.envFrom.enabled }}
          envFrom:
{{ toYaml .Values.envFrom.data | indent 12 }} 
 {{- end }}
{{- end }}
# Configure command if ".Values.command.enabled" egal "true" 
        {{- if .Values.command }} 
          {{- if .Values.command.enabled }}  
          command:
{{ toYaml .Values.command.data | indent 12 }}  
          {{- end }} 
        {{- end }}     

# Configure args if ".Values.args.enabled" egal "true"    
        {{- if .Values.args }}
          {{- if .Values.args.enabled }}  
          args:
{{ toYaml .Values.args.data | indent 12 }}  
          {{- end }}   
        {{- end }}  
      {{- if .Values.priorityClass }}
      priorityClassName: {{ .Values.priorityClass.name }}
      {{- end }}

# Configure volumes if ".Values.volumes.enabled" egal "true"  
      {{- if .Values.volumes.enabled }} 
      volumes:
{{ toYaml .Values.volumes.data | indent 10 }}
      {{- end }}

{{- end -}}
